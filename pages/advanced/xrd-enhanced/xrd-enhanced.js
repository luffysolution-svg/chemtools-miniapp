/**
 * XRDÂàÜÊûêÂ∑•ÂÖ∑È°µÈù¢ÔºàÂÆåÊï¥ÁâàÔºâ
 * ÂåÖÂê´ÔºöÂü∫Á°ÄËÆ°ÁÆóÔºàd-2Œ∏‰∫íÁÆó„ÄÅÊô∂Á≥ªd(hkl)Ôºâ+ Ê∑±Â∫¶ÂàÜÊûêÔºàScherrerÂÖ¨Âºè„ÄÅÊô∂Ê†ºÁ≤æ‰øÆ„ÄÅÊ∂àÂÖâÂà§Êñ≠„ÄÅÂ≥∞Âº∫ÂàÜÊûêÔºâ
 */

const {
  calculateCrystalliteSize,
  refineLatticeParameters,
  determineExtinction,
  calculateRelativeIntensity,
  getMetadata
} = require('../../../utils/xrd-enhanced');
const { listTargets, dFromTheta2, theta2FromD, dCubic, dTetragonal, dOrthorhombic, dHexagonal } = require('../../../utils/xrd');
const { historyService } = require('../../../services/history');
const { getPresets } = require('../../../utils/input-presets');

Page({
  data: {
    // Â∑•ÂÖ∑ÈÄâÊã©
    tools: [
      { id: 'bragg', name: 'd-2Œ∏‰∫íÁÆó', icon: 'üíé' },
      { id: 'crystal', name: 'Êô∂Á≥ªd(hkl)', icon: 'üî∑' },
      { id: 'scherrer', name: 'ScherrerÂÖ¨Âºè', icon: 'üìè' },
      { id: 'refine', name: 'Êô∂Ê†ºÁ≤æ‰øÆ', icon: 'üîß' },
      { id: 'extinction', name: 'Ê∂àÂÖâÂà§Êñ≠', icon: 'üîç' },
      { id: 'intensity', name: 'Â≥∞Âº∫ÂàÜÊûê', icon: 'üìä' }
    ],
    currentTool: 'bragg',

    // BraggËÆ°ÁÆóÔºàÂü∫Á°ÄÔºâ
    xrayTargets: [],
    xrayIndex: 0,
    braggLambda: '1.5406',
    braggLambdaPlaceholder: '1.5406',
    braggMode: 'theta-to-d',
    braggTheta2: '',
    braggDValue: '',
    braggResult: '',
    braggResultText: '',
    braggHint: '',
    
    // È¢ÑËÆæÂÄº
    wavelengthPresets: [],
    anglePresets: [],
    dValuePresets: [],

    // Êô∂Á≥ªËÆ°ÁÆóÔºàÂü∫Á°ÄÔºâ
    crystalSystemsBasic: ['Á´ãÊñπÊô∂Á≥ª', 'ÂõõÊñπÊô∂Á≥ª', 'Ê≠£‰∫§Êô∂Á≥ª', 'ÂÖ≠ÊñπÊô∂Á≥ª'],
    crystalIndexBasic: 0,
    latticeA: '',
    latticeB: '',
    latticeC: '',
    millerH: '',
    millerK: '',
    millerL: '',
    crystalResult: '',
    crystalResultText: '',
    crystalHint: '',

    // ScherrerËÆ°ÁÆó
    fwhm: '',
    theta2: '',
    lambda: '1.5406',
    lambdaPlaceholder: '1.5406',
    shapeK: '0.9',
    scherrerResult: null,
    scherrerResultText: '',

    // Êô∂Ê†ºÁ≤æ‰øÆ
    crystalSystems: ['Á´ãÊñπÊô∂Á≥ª', 'ÂõõÊñπÊô∂Á≥ª', 'ÂÖ≠ÊñπÊô∂Á≥ª', 'Ê≠£‰∫§Êô∂Á≥ª'],
    crystalIndex: 0,
    refinePeaks: '',
    refinePeaksPlaceholder: 'Ê†ºÂºèÔºöh,k,l,2Œ∏ (ÊØèË°å‰∏Ä‰∏™)\n‰æãÂ¶ÇÔºö1,1,1,38.5\n     2,0,0,44.8',
    refineResult: null,
    refineResultText: '',

    // Ê∂àÂÖâÂà§Êñ≠
    extinctionPeaks: '',
    extinctionPeaksPlaceholder: 'Ê†ºÂºèÔºöh,k,l (ÊØèË°å‰∏Ä‰∏™)\n‰æãÂ¶ÇÔºö1,1,1\n     2,0,0\n     2,2,0',
    extinctionResult: null,
    extinctionResultText: '',

    // Â≥∞Âº∫ÂàÜÊûê
    intensityPeaks: '',
    intensityPeaksPlaceholder: 'Ê†ºÂºèÔºöhkl,Âº∫Â∫¶ (ÊØèË°å‰∏Ä‰∏™)\n‰æãÂ¶ÇÔºö111,1500\n     200,2000\n     220,800',
    intensityResult: null,
    intensityResultText: ''
  },

  onLoad() {
    // Âä†ËΩΩXÂ∞ÑÁ∫øÊ∫êÊï∞ÊçÆ
    const targets = listTargets();
    const xrayTargets = targets.map(t => `${t.name} (${t.lambda} √Ö)`);
    this.setData({ 
      xrayTargets,
      _targets: targets,
      wavelengthPresets: getPresets('xrd', 'wavelength'),
      anglePresets: getPresets('xrd', 'angle'),
      dValuePresets: getPresets('xrd', 'dValue')
    });
  },

  /**
   * ÂàáÊç¢Â∑•ÂÖ∑
   */
  switchTool(e) {
    const tool = e.currentTarget.dataset.tool;
    this.setData({ currentTool: tool });
  },

  /**
   * ========== BraggËÆ°ÁÆóÂäüËÉΩÔºàÂü∫Á°ÄÔºâ==========
   */

  handleXrayChange(e) {
    const index = Number(e.detail.value);
    const lambda = this.data._targets[index].lambda;
    this.setData({ 
      xrayIndex: index,
      braggLambda: String(lambda),
      braggLambdaPlaceholder: String(lambda)
    });
  },

  handleBraggLambdaInput(e) {
    this.setData({ braggLambda: e.detail.value });
  },

  switchBraggMode(e) {
    const mode = e.currentTarget.dataset.mode;
    this.setData({ 
      braggMode: mode,
      braggTheta2: '',
      braggDValue: '',
      braggResult: ''
    });
  },

  handleBraggTheta2Input(e) {
    this.setData({ braggTheta2: e.detail.value });
  },

  handleBraggDInput(e) {
    this.setData({ braggDValue: e.detail.value });
  },
  
  handleWavelengthChange(e) {
    this.setData({ braggLambda: e.detail.value });
  },
  
  handleAngleChange(e) {
    this.setData({ braggTheta2: e.detail.value });
  },
  
  handleDValueChange(e) {
    this.setData({ braggDValue: e.detail.value });
  },
  
  handleRealtimeCalculate(e) {
    if (e.detail.value && this.data.braggLambda) {
      this.calculateBragg();
    }
  },
  
  handleRealtimeCalculateBragg(e) {
    if (e.detail.value && this.data.braggLambda) {
      this.calculateBragg();
    }
  },

  calculateBragg() {
    const { braggMode, braggLambda, braggTheta2, braggDValue } = this.data;

    const lam = Number(braggLambda);
    if (isNaN(lam) || lam <= 0) {
      wx.showToast({ title: 'ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÊ≥¢Èïø', icon: 'none' });
      return;
    }

    if (braggMode === 'theta-to-d') {
      // 2Œ∏ ‚Üí d
      if (!braggTheta2) {
        wx.showToast({ title: 'ËØ∑ËæìÂÖ•Ë°çÂ∞ÑËßí 2Œ∏', icon: 'none' });
        return;
      }

      const result = dFromTheta2(braggTheta2, lam);
      if (result.error) {
        wx.showToast({ title: result.error, icon: 'none' });
        return;
      }

      const d = result.d;
      const braggResult = `d = ${d.toFixed(4)} √Ö`;
      const braggResultText = `Êô∂Èù¢Èó¥Ë∑ù d = ${d.toFixed(4)} √Ö\n\nÂèÇÊï∞Ôºö\n2Œ∏ = ${braggTheta2}¬∞\nŒª = ${lam} √Ö\n\nÂÖ¨ÂºèÔºöBraggÂÆöÂæã nŒª = 2d sinŒ∏ (n=1)`;

      this.setData({
        braggResult,
        braggResultText,
        braggHint: 'BraggÂÆöÂæãÔºönŒª = 2d sinŒ∏ (n=1)',
        braggDValue: d.toFixed(4)
      });

      historyService.add({
        tool: 'XRDÂàÜÊûê-2Œ∏‚Üíd',
        input: { theta2: braggTheta2, lambda: lam },
        result: `d=${d.toFixed(4)}√Ö`,
        time: new Date().getTime()
      });

    } else {
      // d ‚Üí 2Œ∏
      if (!braggDValue) {
        wx.showToast({ title: 'ËØ∑ËæìÂÖ•Êô∂Èù¢Èó¥Ë∑ù d', icon: 'none' });
        return;
      }

      const result = theta2FromD(braggDValue, lam);
      if (result.error) {
        wx.showToast({ title: result.error, icon: 'none', duration: 2500 });
        return;
      }

      const theta = result.theta2;
      const braggResult = `2Œ∏ = ${theta.toFixed(3)}¬∞`;
      const braggResultText = `Ë°çÂ∞ÑËßí 2Œ∏ = ${theta.toFixed(3)}¬∞\n\nÂèÇÊï∞Ôºö\nd = ${braggDValue} √Ö\nŒª = ${lam} √Ö\n\nÂÖ¨ÂºèÔºöBraggÂÆöÂæã nŒª = 2d sinŒ∏ (n=1)`;

      this.setData({
        braggResult,
        braggResultText,
        braggHint: 'BraggÂÆöÂæãÔºönŒª = 2d sinŒ∏ (n=1)',
        braggTheta2: theta.toFixed(3)
      });

      historyService.add({
        tool: 'XRDÂàÜÊûê-d‚Üí2Œ∏',
        input: { d: braggDValue, lambda: lam },
        result: `2Œ∏=${theta.toFixed(3)}¬∞`,
        time: new Date().getTime()
      });
    }
  },

  /**
   * ========== Êô∂Á≥ªËÆ°ÁÆóÂäüËÉΩÔºàÂü∫Á°ÄÔºâ==========
   */

  handleCrystalSystemChange(e) {
    const index = Number(e.detail.value);
    this.setData({ 
      crystalIndexBasic: index,
      latticeB: '',
      latticeC: '',
      crystalResult: ''
    });
  },

  handleLatticeAInput(e) {
    this.setData({ latticeA: e.detail.value });
  },

  handleLatticeBInput(e) {
    this.setData({ latticeB: e.detail.value });
  },

  handleLatticeCInput(e) {
    this.setData({ latticeC: e.detail.value });
  },

  handleMillerHInput(e) {
    this.setData({ millerH: e.detail.value });
  },

  handleMillerKInput(e) {
    this.setData({ millerK: e.detail.value });
  },

  handleMillerLInput(e) {
    this.setData({ millerL: e.detail.value });
  },

  calculateCrystal() {
    const { crystalIndexBasic, latticeA, latticeB, latticeC, millerH, millerK, millerL } = this.data;

    // È™åËØÅÁ±≥ÂãíÊåáÊï∞
    const h = Number(millerH) || 0;
    const k = Number(millerK) || 0;
    const l = Number(millerL) || 0;

    if (h === 0 && k === 0 && l === 0) {
      wx.showToast({ title: 'Á±≥ÂãíÊåáÊï∞‰∏çËÉΩÂÖ®‰∏∫0', icon: 'none' });
      return;
    }

    // È™åËØÅÊô∂Ê†ºÂèÇÊï∞
    const a = Number(latticeA);
    if (isNaN(a) || a <= 0) {
      wx.showToast({ title: 'ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÊô∂Ê†ºÂ∏∏Êï∞ a', icon: 'none' });
      return;
    }

    let result, systemName;

    switch (crystalIndexBasic) {
      case 0: // Á´ãÊñπ
        result = dCubic(a, h, k, l);
        systemName = 'Á´ãÊñπÊô∂Á≥ª';
        break;

      case 1: // ÂõõÊñπ
        const c1 = Number(latticeC);
        if (isNaN(c1) || c1 <= 0) {
          wx.showToast({ title: 'ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÊô∂Ê†ºÂ∏∏Êï∞ c', icon: 'none' });
          return;
        }
        result = dTetragonal(a, c1, h, k, l);
        systemName = 'ÂõõÊñπÊô∂Á≥ª';
        break;

      case 2: // Ê≠£‰∫§
        const b = Number(latticeB);
        const c2 = Number(latticeC);
        if (isNaN(b) || b <= 0 || isNaN(c2) || c2 <= 0) {
          wx.showToast({ title: 'ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÊô∂Ê†ºÂ∏∏Êï∞ b Âíå c', icon: 'none' });
          return;
        }
        result = dOrthorhombic(a, b, c2, h, k, l);
        systemName = 'Ê≠£‰∫§Êô∂Á≥ª';
        break;

      case 3: // ÂÖ≠Êñπ
        const c3 = Number(latticeC);
        if (isNaN(c3) || c3 <= 0) {
          wx.showToast({ title: 'ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÊô∂Ê†ºÂ∏∏Êï∞ c', icon: 'none' });
          return;
        }
        result = dHexagonal(a, c3, h, k, l);
        systemName = 'ÂÖ≠ÊñπÊô∂Á≥ª';
        break;
    }

    if (result.error) {
      wx.showToast({ 
        title: result.error, 
        icon: 'none',
        duration: 2000
      });
      return;
    }

    const d = result.d;
    const crystalResult = `d(${h}${k}${l}) = ${d.toFixed(4)} √Ö`;
    const crystalResultText = `${systemName}\nÊô∂Èù¢Èó¥Ë∑ù d(${h}${k}${l}) = ${d.toFixed(4)} √Ö\n\nÊô∂Ê†ºÂèÇÊï∞Ôºö\na = ${a} √Ö${latticeB ? `\nb = ${latticeB} √Ö` : ''}${latticeC ? `\nc = ${latticeC} √Ö` : ''}`;

    this.setData({
      crystalResult,
      crystalResultText,
      crystalHint: `${systemName}ÁöÑÊô∂Èù¢Èó¥Ë∑ù`
    });

    historyService.add({
      tool: `XRDÂàÜÊûê-${systemName}`,
      input: { hkl: `(${h}${k}${l})`, a },
      result: `d=${d.toFixed(4)}√Ö`,
      time: new Date().getTime()
    });
  },

  /**
   * ========== ScherrerËÆ°ÁÆóÂäüËÉΩ ==========
   */

  handleFwhmInput(e) {
    this.setData({ fwhm: e.detail.value });
  },

  handleTheta2Input(e) {
    this.setData({ theta2: e.detail.value });
  },

  handleLambdaInput(e) {
    this.setData({ lambda: e.detail.value });
  },

  handleShapeKInput(e) {
    this.setData({ shapeK: e.detail.value });
  },

  calculateScherrer() {
    const { fwhm, theta2, lambda, shapeK } = this.data;

    if (!fwhm || !theta2) {
      wx.showToast({
        title: 'ËØ∑ËæìÂÖ•FWHMÂíå2Œ∏',
        icon: 'none'
      });
      return;
    }

    const result = calculateCrystalliteSize(
      parseFloat(fwhm),
      parseFloat(theta2),
      parseFloat(lambda) || 1.5406,
      parseFloat(shapeK) || 0.9
    );

    if (result.error) {
      wx.showToast({
        title: result.error,
        icon: 'none',
        duration: 3000
      });
      return;
    }

    // Ê†ºÂºèÂåñÁªìÊûúÊñáÊú¨
    let resultText = `Êô∂Á≤íÂ∞∫ÂØ∏Ôºö${result.size.toFixed(2)} nm\n\n`;
    resultText += `üìã ËÆ°ÁÆóËØ¶ÊÉÖÔºö\n`;
    resultText += `‚Ä¢ FWHMÔºö${result.details.fwhm}\n`;
    resultText += `‚Ä¢ 2Œ∏Ôºö${result.details.theta2}\n`;
    resultText += `‚Ä¢ Ê≥¢ÈïøŒªÔºö${result.details.lambda}\n`;
    resultText += `‚Ä¢ ÂΩ¢Áä∂Âõ†Â≠êKÔºö${result.details.K}\n`;
    resultText += `‚Ä¢ ÂÖ¨ÂºèÔºö${result.details.formula}\n\n`;
    resultText += `üìê Á≤æÂ∫¶Ôºö${result.precision}\n\n`;
    
    if (result.details.strainWarning) {
      resultText += `${result.details.strainWarning}\n\n`;
    }
    if (result.details.sizeNote) {
      resultText += `${result.details.sizeNote}\n\n`;
    }

    resultText += `‚ö†Ô∏è Ê≥®ÊÑè‰∫ãÈ°πÔºö\n`;
    result.conditions.forEach(cond => {
      resultText += `‚Ä¢ ${cond}\n`;
    });

    this.setData({
      scherrerResult: result,
      scherrerResultText: resultText
    });

    // ‰øùÂ≠òÂéÜÂè≤
    historyService.add({
      tool: 'XRDÊ∑±Â∫¶ÂàÜÊûê-ScherrerÂÖ¨Âºè',
      input: { fwhm, theta2, lambda, shapeK },
      result: `${result.size.toFixed(2)} nm`,
      time: new Date().getTime()
    });
  },

  /**
   * ========== Êô∂Ê†ºÁ≤æ‰øÆÂäüËÉΩ ==========
   */

  handleCrystalSystemChange(e) {
    this.setData({ crystalIndex: Number(e.detail.value) });
  },

  handleRefinePeaksInput(e) {
    this.setData({ refinePeaks: e.detail.value });
  },

  calculateRefine() {
    const { refinePeaks, crystalIndex, crystalSystems } = this.data;

    if (!refinePeaks.trim()) {
      wx.showToast({
        title: 'ËØ∑ËæìÂÖ•Ë°çÂ∞ÑÂ≥∞Êï∞ÊçÆ',
        icon: 'none'
      });
      return;
    }

    // Ëß£ÊûêËæìÂÖ•Êï∞ÊçÆ
    const lines = refinePeaks.trim().split('\n');
    const peaks = [];
    
    for (const line of lines) {
      const parts = line.trim().split(/[,Ôºå\s]+/);
      if (parts.length >= 4) {
        peaks.push({
          h: parseFloat(parts[0]),
          k: parseFloat(parts[1]),
          l: parseFloat(parts[2]),
          theta2: parseFloat(parts[3])
        });
      }
    }

    if (peaks.length < 3) {
      wx.showToast({
        title: 'Ëá≥Â∞ëÈúÄË¶Å3‰∏™ÊúâÊïàË°çÂ∞ÑÂ≥∞',
        icon: 'none',
        duration: 3000
      });
      return;
    }

    const systemMap = ['cubic', 'tetragonal', 'hexagonal', 'orthorhombic'];
    const result = refineLatticeParameters(peaks, systemMap[crystalIndex]);

    if (result.error) {
      wx.showToast({
        title: result.error,
        icon: 'none',
        duration: 3000
      });
      return;
    }

    // Ê†ºÂºèÂåñÁªìÊûú
    let resultText = `‚ú® Êô∂Ê†ºÂ∏∏Êï∞Á≤æ‰øÆÁªìÊûú\n\n`;
    resultText += `Êô∂Á≥ªÔºö${result.crystalSystem}\n`;
    resultText += `Êô∂Ê†ºÂ∏∏Êï∞ a = ${result.latticeParameter.a} ${result.latticeParameter.unit}\n`;
    resultText += `‰ΩøÁî®Â≥∞Êï∞Ôºö${result.peaksUsed}\n`;
    resultText += `R¬≤ = ${result.rSquared} (${result.goodnessOfFit})\n\n`;
    
    resultText += `üìä Á≤æ‰øÆÂ≥∞‰ΩçÔºö\n`;
    result.refinedPeaks.forEach(peak => {
      resultText += `${peak.hkl}: 2Œ∏=${peak.theta2}¬∞, d=${peak.d}√Ö\n`;
    });
    
    resultText += `\nüí° ËØ¥ÊòéÔºö\n`;
    result.notes.forEach(note => {
      resultText += `‚Ä¢ ${note}\n`;
    });

    this.setData({
      refineResult: result,
      refineResultText: resultText
    });

    // ‰øùÂ≠òÂéÜÂè≤
    historyService.add({
      tool: 'XRDÊ∑±Â∫¶ÂàÜÊûê-Êô∂Ê†ºÁ≤æ‰øÆ',
      input: { peaks: peaks.length, system: crystalSystems[crystalIndex] },
      result: `a=${result.latticeParameter.a}√Ö`,
      time: new Date().getTime()
    });
  },

  /**
   * ========== Ê∂àÂÖâÂà§Êñ≠ÂäüËÉΩ ==========
   */

  handleExtinctionPeaksInput(e) {
    this.setData({ extinctionPeaks: e.detail.value });
  },

  calculateExtinction() {
    const { extinctionPeaks } = this.data;

    if (!extinctionPeaks.trim()) {
      wx.showToast({
        title: 'ËØ∑ËæìÂÖ•Ë°çÂ∞ÑÂ≥∞(hkl)',
        icon: 'none'
      });
      return;
    }

    // Ëß£ÊûêËæìÂÖ•
    const lines = extinctionPeaks.trim().split('\n');
    const peaks = [];

    for (const line of lines) {
      const parts = line.trim().split(/[,Ôºå\s]+/);
      if (parts.length >= 3) {
        peaks.push({
          h: parseInt(parts[0]),
          k: parseInt(parts[1]),
          l: parseInt(parts[2])
        });
      }
    }

    if (peaks.length === 0) {
      wx.showToast({
        title: 'Êú™ÊâæÂà∞ÊúâÊïàÁöÑ(hkl)Êï∞ÊçÆ',
        icon: 'none'
      });
      return;
    }

    const result = determineExtinction(peaks);

    if (result.error) {
      wx.showToast({
        title: result.error,
        icon: 'none',
        duration: 3000
      });
      return;
    }

    // Ê†ºÂºèÂåñÁªìÊûú
    let resultText = `üîç Ê∂àÂÖâÁ≥ªÁªüÂàÜÊûêÁªìÊûú\n\n`;
    resultText += `ÂàÜÊûêÂ≥∞Êï∞Ôºö${result.peaksAnalyzed}\n\n`;
    resultText += `ÂèØËÉΩÁöÑÂ∏ÉÊãâÁª¥Ê†ºÂ≠êÔºö\n\n`;

    result.possibleLattices.forEach((lattice, index) => {
      resultText += `${index + 1}. ${lattice.type}\n`;
      resultText += `   Ê∂àÂÖâËßÑÂàôÔºö${lattice.rule}\n`;
      resultText += `   Á§∫‰æãÁ©∫Èó¥Áæ§Ôºö${lattice.examples.join(', ')}\n\n`;
    });

    resultText += `${result.note}\n\n`;
    resultText += `üí° ${result.recommendation}`;

    this.setData({
      extinctionResult: result,
      extinctionResultText: resultText
    });

    // ‰øùÂ≠òÂéÜÂè≤
    historyService.add({
      tool: 'XRDÊ∑±Â∫¶ÂàÜÊûê-Ê∂àÂÖâÂà§Êñ≠',
      input: { peaks: peaks.length },
      result: `ÂèØËÉΩÁöÑÊ†ºÂ≠êÔºö${result.possibleLattices.length}Áßç`,
      time: new Date().getTime()
    });
  },

  /**
   * ========== Â≥∞Âº∫ÂàÜÊûêÂäüËÉΩ ==========
   */

  handleIntensityPeaksInput(e) {
    this.setData({ intensityPeaks: e.detail.value });
  },

  calculateIntensity() {
    const { intensityPeaks } = this.data;

    if (!intensityPeaks.trim()) {
      wx.showToast({
        title: 'ËØ∑ËæìÂÖ•Â≥∞Âº∫Êï∞ÊçÆ',
        icon: 'none'
      });
      return;
    }

    // Ëß£ÊûêËæìÂÖ•
    const lines = intensityPeaks.trim().split('\n');
    const peaks = [];

    for (const line of lines) {
      const parts = line.trim().split(/[,Ôºå\s]+/);
      if (parts.length >= 2) {
        peaks.push({
          hkl: parts[0],
          intensity: parseFloat(parts[1])
        });
      }
    }

    if (peaks.length === 0) {
      wx.showToast({
        title: 'Êú™ÊâæÂà∞ÊúâÊïàÁöÑÂ≥∞Âº∫Êï∞ÊçÆ',
        icon: 'none'
      });
      return;
    }

    const result = calculateRelativeIntensity(peaks);

    if (result.error) {
      wx.showToast({
        title: result.error,
        icon: 'none',
        duration: 3000
      });
      return;
    }

    // Ê†ºÂºèÂåñÁªìÊûú
    let resultText = `üìä Áõ∏ÂØπÂ≥∞Âº∫ÂàÜÊûêÁªìÊûú\n\n`;
    resultText += `Â≥∞Êï∞Ôºö${result.peakCount}\n`;
    resultText += `ÊúÄÂ§ßÂº∫Â∫¶Ôºö${result.maxIntensity}\n`;
    resultText += `ÊÄªÂº∫Â∫¶Ôºö${result.totalIntensity}\n\n`;
    resultText += `ÂΩí‰∏ÄÂåñÁªìÊûúÔºö\n`;
    resultText += `Â≥∞‰Ωç | Âº∫Â∫¶ | Áõ∏ÂØπÂº∫Â∫¶\n`;
    resultText += `${'‚îÄ'.repeat(30)}\n`;

    result.normalizedPeaks.forEach(peak => {
      resultText += `${peak.hkl.padEnd(6)} | ${peak.intensity.padEnd(8)} | ${peak.percentage}\n`;
    });

    resultText += `\nüí° ${result.usage}\n\n`;
    resultText += `‚ö†Ô∏è ${result.crystallinityNote}`;

    this.setData({
      intensityResult: result,
      intensityResultText: resultText
    });

    // ‰øùÂ≠òÂéÜÂè≤
    historyService.add({
      tool: 'XRDÊ∑±Â∫¶ÂàÜÊûê-Â≥∞Âº∫ÂàÜÊûê',
      input: { peaks: peaks.length },
      result: `ÊúÄÂº∫Â≥∞Ôºö${result.normalizedPeaks[0]?.hkl || 'N/A'}`,
      time: new Date().getTime()
    });
  },

  /**
   * Ê∏ÖÁ©∫ÂΩìÂâçÂ∑•ÂÖ∑ÁöÑÁªìÊûú
   */
  clearResult() {
    const { currentTool } = this.data;
    
    switch (currentTool) {
      case 'bragg':
        this.setData({
          braggTheta2: '',
          braggDValue: '',
          braggResult: '',
          braggResultText: '',
          braggHint: ''
        });
        break;
      case 'crystal':
        this.setData({
          latticeA: '',
          latticeB: '',
          latticeC: '',
          millerH: '',
          millerK: '',
          millerL: '',
          crystalResult: '',
          crystalResultText: '',
          crystalHint: ''
        });
        break;
      case 'scherrer':
        this.setData({
          fwhm: '',
          theta2: '',
          scherrerResult: null,
          scherrerResultText: ''
        });
        break;
      case 'refine':
        this.setData({
          refinePeaks: '',
          refineResult: null,
          refineResultText: ''
        });
        break;
      case 'extinction':
        this.setData({
          extinctionPeaks: '',
          extinctionResult: null,
          extinctionResultText: ''
        });
        break;
      case 'intensity':
        this.setData({
          intensityPeaks: '',
          intensityResult: null,
          intensityResultText: ''
        });
        break;
    }
  },

  /**
   * ÂØºÂá∫ÁªìÊûú
   */
  exportResult() {
    const { currentTool, braggResultText, crystalResultText, scherrerResultText, refineResultText, extinctionResultText, intensityResultText } = this.data;
    
    let text = '';
    switch (currentTool) {
      case 'bragg':
        text = braggResultText;
        break;
      case 'crystal':
        text = crystalResultText;
        break;
      case 'scherrer':
        text = scherrerResultText;
        break;
      case 'refine':
        text = refineResultText;
        break;
      case 'extinction':
        text = extinctionResultText;
        break;
      case 'intensity':
        text = intensityResultText;
        break;
    }

    if (!text) {
      wx.showToast({
        title: 'ÊöÇÊó†ÁªìÊûúÂèØÂØºÂá∫',
        icon: 'none'
      });
      return;
    }

    wx.setClipboardData({
      data: text,
      success() {
        wx.showToast({
          title: 'Â∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø',
          icon: 'success'
        });
      }
    });
  }
});

